// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// IRF_compute
List IRF_compute(arma::mat beta, arma::mat B, int hor, int nvar, int plag);
RcppExport SEXP _VARS_IRF_compute(SEXP betaSEXP, SEXP BSEXP, SEXP horSEXP, SEXP nvarSEXP, SEXP plagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type plag(plagSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_compute(beta, B, hor, nvar, plag));
    return rcpp_result_gen;
END_RCPP
}
// FEVD_compute
arma::cube FEVD_compute(arma::mat Sigma, arma::mat B, arma::cube Psi, int nvar, int hor);
RcppExport SEXP _VARS_FEVD_compute(SEXP SigmaSEXP, SEXP BSEXP, SEXP PsiSEXP, SEXP nvarSEXP, SEXP horSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    rcpp_result_gen = Rcpp::wrap(FEVD_compute(Sigma, B, Psi, nvar, hor));
    return rcpp_result_gen;
END_RCPP
}
// HDC
double HDC(int start, int end, int shock, int res_var, arma::cube IRF, arma::mat eps);
RcppExport SEXP _VARS_HDC(SEXP startSEXP, SEXP endSEXP, SEXP shockSEXP, SEXP res_varSEXP, SEXP IRFSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type shock(shockSEXP);
    Rcpp::traits::input_parameter< int >::type res_var(res_varSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type IRF(IRFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(HDC(start, end, shock, res_var, IRF, eps));
    return rcpp_result_gen;
END_RCPP
}
// HDC_ts
arma::vec HDC_ts(int start, int end, int shock, int res_var, arma::cube IRF, arma::mat eps);
RcppExport SEXP _VARS_HDC_ts(SEXP startSEXP, SEXP endSEXP, SEXP shockSEXP, SEXP res_varSEXP, SEXP IRFSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type shock(shockSEXP);
    Rcpp::traits::input_parameter< int >::type res_var(res_varSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type IRF(IRFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(HDC_ts(start, end, shock, res_var, IRF, eps));
    return rcpp_result_gen;
END_RCPP
}
// get_HDs_ts
arma::mat get_HDs_ts(int start, int end, int which_var, arma::cube IRF, arma::mat eps);
RcppExport SEXP _VARS_get_HDs_ts(SEXP startSEXP, SEXP endSEXP, SEXP which_varSEXP, SEXP IRFSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type which_var(which_varSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type IRF(IRFSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_HDs_ts(start, end, which_var, IRF, eps));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_c
List bootstrap_c(arma::mat Y_start, arma::mat beta, arma::mat u, arma::mat IV, std::string identify, std::string method, int save, int T);
RcppExport SEXP _VARS_bootstrap_c(SEXP Y_startSEXP, SEXP betaSEXP, SEXP uSEXP, SEXP IVSEXP, SEXP identifySEXP, SEXP methodSEXP, SEXP saveSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y_start(Y_startSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type IV(IVSEXP);
    Rcpp::traits::input_parameter< std::string >::type identify(identifySEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type save(saveSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_c(Y_start, beta, u, IV, identify, method, save, T));
    return rcpp_result_gen;
END_RCPP
}
// IRF_compute_batch
List IRF_compute_batch(arma::cube beta_draw, arma::cube B_draw, int hor);
RcppExport SEXP _VARS_IRF_compute_batch(SEXP beta_drawSEXP, SEXP B_drawSEXP, SEXP horSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type beta_draw(beta_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type B_draw(B_drawSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_compute_batch(beta_draw, B_draw, hor));
    return rcpp_result_gen;
END_RCPP
}
// FEVD_compute_batch
arma::cube FEVD_compute_batch(arma::cube beta_draw, arma::cube B_draw, arma::cube Sigma_draw, arma::cube Psi_draw, int hor);
RcppExport SEXP _VARS_FEVD_compute_batch(SEXP beta_drawSEXP, SEXP B_drawSEXP, SEXP Sigma_drawSEXP, SEXP Psi_drawSEXP, SEXP horSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type beta_draw(beta_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type B_draw(B_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sigma_draw(Sigma_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Psi_draw(Psi_drawSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    rcpp_result_gen = Rcpp::wrap(FEVD_compute_batch(beta_draw, B_draw, Sigma_draw, Psi_draw, hor));
    return rcpp_result_gen;
END_RCPP
}
// HDs_compute_batch
arma::cube HDs_compute_batch(int start, int end, int which_var, arma::cube IRF_draw, arma::cube eps_draw);
RcppExport SEXP _VARS_HDs_compute_batch(SEXP startSEXP, SEXP endSEXP, SEXP which_varSEXP, SEXP IRF_drawSEXP, SEXP eps_drawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type which_var(which_varSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type IRF_draw(IRF_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type eps_draw(eps_drawSEXP);
    rcpp_result_gen = Rcpp::wrap(HDs_compute_batch(start, end, which_var, IRF_draw, eps_draw));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler
List gibbs_sampler(arma::mat Y, arma::mat X, List priors, int burn_in, int draw, int thin, int post_save, int post_method);
RcppExport SEXP _VARS_gibbs_sampler(SEXP YSEXP, SEXP XSEXP, SEXP priorsSEXP, SEXP burn_inSEXP, SEXP drawSEXP, SEXP thinSEXP, SEXP post_saveSEXP, SEXP post_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type draw(drawSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type post_save(post_saveSEXP);
    Rcpp::traits::input_parameter< int >::type post_method(post_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(Y, X, priors, burn_in, draw, thin, post_save, post_method));
    return rcpp_result_gen;
END_RCPP
}
// impose_SR_and_EBR
List impose_SR_and_EBR(List alpha_post, List Sigma_post, List restrictions, arma::mat Y, arma::mat X, int draw, int plag, int hor);
RcppExport SEXP _VARS_impose_SR_and_EBR(SEXP alpha_postSEXP, SEXP Sigma_postSEXP, SEXP restrictionsSEXP, SEXP YSEXP, SEXP XSEXP, SEXP drawSEXP, SEXP plagSEXP, SEXP horSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type alpha_post(alpha_postSEXP);
    Rcpp::traits::input_parameter< List >::type Sigma_post(Sigma_postSEXP);
    Rcpp::traits::input_parameter< List >::type restrictions(restrictionsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type draw(drawSEXP);
    Rcpp::traits::input_parameter< int >::type plag(plagSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    rcpp_result_gen = Rcpp::wrap(impose_SR_and_EBR(alpha_post, Sigma_post, restrictions, Y, X, draw, plag, hor));
    return rcpp_result_gen;
END_RCPP
}
// impose_NSR
List impose_NSR(List restrictions, arma::mat Y, arma::mat X, arma::cube B_draw, arma::cube beta_draw, arma::cube Sigma_draw, int plag, int hor, int M);
RcppExport SEXP _VARS_impose_NSR(SEXP restrictionsSEXP, SEXP YSEXP, SEXP XSEXP, SEXP B_drawSEXP, SEXP beta_drawSEXP, SEXP Sigma_drawSEXP, SEXP plagSEXP, SEXP horSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type restrictions(restrictionsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type B_draw(B_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta_draw(beta_drawSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sigma_draw(Sigma_drawSEXP);
    Rcpp::traits::input_parameter< int >::type plag(plagSEXP);
    Rcpp::traits::input_parameter< int >::type hor(horSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(impose_NSR(restrictions, Y, X, B_draw, beta_draw, Sigma_draw, plag, hor, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VARS_IRF_compute", (DL_FUNC) &_VARS_IRF_compute, 5},
    {"_VARS_FEVD_compute", (DL_FUNC) &_VARS_FEVD_compute, 5},
    {"_VARS_HDC", (DL_FUNC) &_VARS_HDC, 6},
    {"_VARS_HDC_ts", (DL_FUNC) &_VARS_HDC_ts, 6},
    {"_VARS_get_HDs_ts", (DL_FUNC) &_VARS_get_HDs_ts, 5},
    {"_VARS_bootstrap_c", (DL_FUNC) &_VARS_bootstrap_c, 8},
    {"_VARS_IRF_compute_batch", (DL_FUNC) &_VARS_IRF_compute_batch, 3},
    {"_VARS_FEVD_compute_batch", (DL_FUNC) &_VARS_FEVD_compute_batch, 5},
    {"_VARS_HDs_compute_batch", (DL_FUNC) &_VARS_HDs_compute_batch, 5},
    {"_VARS_gibbs_sampler", (DL_FUNC) &_VARS_gibbs_sampler, 8},
    {"_VARS_impose_SR_and_EBR", (DL_FUNC) &_VARS_impose_SR_and_EBR, 8},
    {"_VARS_impose_NSR", (DL_FUNC) &_VARS_impose_NSR, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_VARS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
